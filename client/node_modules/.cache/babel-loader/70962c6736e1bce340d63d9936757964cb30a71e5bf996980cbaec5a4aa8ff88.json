{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devi Sri Prasad\\\\Desktop\\\\Farmaconnect\\\\client\\\\src\\\\ChatModal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './ChatModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:5000\";\nfunction ChatModal({\n  show,\n  onClose,\n  order,\n  currentUser,\n  onMarkAsRead\n}) {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (show && order) {\n      // Connect to socket server\n      const newSocket = io(SOCKET_SERVER_URL);\n      setSocket(newSocket);\n\n      // Join the order-specific room\n      newSocket.emit('join_room', order.id);\n\n      // Fetch message history\n      fetchMessageHistory();\n\n      // Listen for incoming messages\n      newSocket.on('receive_message', data => {\n        setMessages(prev => [...prev, data]);\n      });\n\n      // Mark messages as read when modal opens\n      markMessagesAsRead();\n      return () => {\n        newSocket.disconnect();\n      };\n    }\n  }, [show, order]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    // Scroll to the bottom of the chat on new message\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const fetchMessageHistory = async () => {\n    setLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`http://localhost:5000/api/chat/${order.id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await res.json();\n      if (data.success) {\n        setMessages(data.messages);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch message history\", err);\n    }\n    setLoading(false);\n  };\n  const markMessagesAsRead = async () => {\n    if (!order) return;\n    try {\n      const token = localStorage.getItem('token');\n      await fetch(`http://localhost:5000/api/chat/read/${order.id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (onMarkAsRead) {\n        onMarkAsRead(order.id);\n      }\n    } catch (err) {\n      console.error(\"Failed to mark messages as read\", err);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim() || !socket) return;\n    const messageData = {\n      room: order.id,\n      sender_id: currentUser.id,\n      sender_name: currentUser.name,\n      message: newMessage,\n      sent_at: new Date().toISOString()\n    };\n\n    // Emit message to server via socket\n    socket.emit('send_message', messageData);\n\n    // Save message to database via API\n    try {\n      const token = localStorage.getItem('token');\n      await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          orderId: order.id,\n          message: newMessage\n        })\n      });\n    } catch (err) {\n      console.error(\"Failed to save message\", err);\n    }\n\n    // Add own message to the chat window immediately\n    setMessages(prev => [...prev, messageData]);\n    setNewMessage('');\n  };\n  if (!show) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-modal-backdrop\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Chat for Order: \", order.product_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"btn-close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-body\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: \"Loading messages...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender_id === currentUser.id ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-sender\",\n            children: msg.sender_id === currentUser.id ? \"You\" : msg.sender_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: new Date(msg.sent_at).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSendMessage,\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn eco-btn ms-2\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatModal, \"4MjGzG9OatcuDO7jJIGMesNe3mk=\");\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useEffect","useState","useRef","io","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","ChatModal","show","onClose","order","currentUser","onMarkAsRead","_s","socket","setSocket","messages","setMessages","newMessage","setNewMessage","loading","setLoading","messagesEndRef","newSocket","emit","id","fetchMessageHistory","on","data","prev","markMessagesAsRead","disconnect","_messagesEndRef$curre","current","scrollIntoView","behavior","token","localStorage","getItem","res","fetch","headers","json","success","err","console","error","method","handleSendMessage","e","preventDefault","trim","messageData","room","sender_id","sender_name","name","message","sent_at","Date","toISOString","body","JSON","stringify","orderId","className","children","product_name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","msg","index","toLocaleTimeString","ref","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/Devi Sri Prasad/Desktop/Farmaconnect/client/src/ChatModal.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './ChatModal.css';\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:5000\";\r\n\r\nfunction ChatModal({ show, onClose, order, currentUser, onMarkAsRead }) {\r\n  const [socket, setSocket] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (show && order) {\r\n      // Connect to socket server\r\n      const newSocket = io(SOCKET_SERVER_URL);\r\n      setSocket(newSocket);\r\n\r\n      // Join the order-specific room\r\n      newSocket.emit('join_room', order.id);\r\n\r\n      // Fetch message history\r\n      fetchMessageHistory();\r\n\r\n      // Listen for incoming messages\r\n      newSocket.on('receive_message', (data) => {\r\n        setMessages(prev => [...prev, data]);\r\n      });\r\n\r\n      // Mark messages as read when modal opens\r\n      markMessagesAsRead();\r\n\r\n      return () => {\r\n        newSocket.disconnect();\r\n      };\r\n    }\r\n  }, [show, order]);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat on new message\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const fetchMessageHistory = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const res = await fetch(`http://localhost:5000/api/chat/${order.id}`, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      const data = await res.json();\r\n      if (data.success) {\r\n        setMessages(data.messages);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch message history\", err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const markMessagesAsRead = async () => {\r\n    if (!order) return;\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await fetch(`http://localhost:5000/api/chat/read/${order.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      if (onMarkAsRead) {\r\n        onMarkAsRead(order.id);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to mark messages as read\", err);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || !socket) return;\r\n\r\n    const messageData = {\r\n      room: order.id,\r\n      sender_id: currentUser.id,\r\n      sender_name: currentUser.name,\r\n      message: newMessage,\r\n      sent_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Emit message to server via socket\r\n    socket.emit('send_message', messageData);\r\n\r\n    // Save message to database via API\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await fetch('http://localhost:5000/api/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ orderId: order.id, message: newMessage }),\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Failed to save message\", err);\r\n    }\r\n    \r\n    // Add own message to the chat window immediately\r\n    setMessages(prev => [...prev, messageData]);\r\n    setNewMessage('');\r\n  };\r\n  \r\n  if (!show) return null;\r\n\r\n  return (\r\n    <div className=\"chat-modal-backdrop\">\r\n      <div className=\"chat-modal-container\">\r\n        <div className=\"chat-modal-header\">\r\n          <h5>Chat for Order: {order.product_name}</h5>\r\n          <button onClick={onClose} className=\"btn-close\"></button>\r\n        </div>\r\n        <div className=\"chat-modal-body\">\r\n          {loading ? (\r\n            <div className=\"text-center\">Loading messages...</div>\r\n          ) : (\r\n            messages.map((msg, index) => (\r\n              <div key={index} className={`message ${msg.sender_id === currentUser.id ? 'sent' : 'received'}`}>\r\n                <div className=\"message-sender\">{msg.sender_id === currentUser.id ? \"You\" : msg.sender_name}</div>\r\n                <div className=\"message-content\">{msg.message}</div>\r\n                <div className=\"message-time\">{new Date(msg.sent_at).toLocaleTimeString()}</div>\r\n              </div>\r\n            ))\r\n          )}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-modal-footer\">\r\n          <form onSubmit={handleSendMessage} className=\"d-flex\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Type a message...\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n            />\r\n            <button type=\"submit\" className=\"btn eco-btn ms-2\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatModal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}